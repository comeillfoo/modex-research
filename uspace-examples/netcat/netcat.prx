%F netcat/nc/netcat.c
%X -n readwrite
## use 'none' cause -L with %X don't work
%L none
shutdown(...	hide
atelnet(...	warn
dflag	false
iflag	false
pfd[0].fd=stdin_fd	hide
pfd[1].fd=net_fd	hide
pfd[2].fd=net_fd	hide
pfd[3].fd=stdout_fd	hide
pfd[0].events=POLLIN	skip
pfd[1].events=0	skip
pfd[2].events=POLLIN	skip
pfd[2].events=0	skip
pfd[3].events=0	skip
pfd[3].events=POLLOUT	skip
pfd[0].fd=(-1)	skip
pfd[1].fd=(-1)	pipe[netout].closed[lflag] = true
pfd[2].fd=(-1)	pipe[netin].closed[lflag] = true
pfd[3].fd=(-1)	skip
num_fds=poll(pfd,4,...	poll(netin, netout, lflag, num_fds)
(num_fds==0)	num_fds==0
(((pfd[0].events&POLLIN)&&(pfd[0].revents&POLLHUP))&&(!(pfd[0].revents&POLLIN)))	false
(((pfd[2].events&POLLIN)&&(pfd[2].revents&POLLHUP))&&(!(pfd[2].revents&POLLIN)))	pipe[netin].closed[!lflag]
(pfd[1].revents&POLLHUP)	pipe[netout].closed[!lflag]
((pfd[1].fd!=(-1))&&Nflag)	false
(pfd[3].revents&POLLHUP)	false
(pfd[1].fd==(-1))	pipe[netout].closed[lflag]
(pfd[3].fd==(-1))	false
(pfd[2].fd!=(-1))	!pipe[netin].closed[lflag]
ret=fillbuf(pfd[0].fd,stdinbuf,...	warn
ret=drainbuf(pfd[1].fd,stdinbuf,...	warn
ret=fillbuf(pfd[2].fd,netinbuf,...	fillbuf(pipe[netin].fd, netin_buf, netinbufpos, ret)
ret=drainbuf(pfd[3].fd,netinbuf,...	drainbuf(netin_buf, netinbufpos, ret)
((recvlimit>0)&&(++recvcount>=recvlimit))	false
((pfd[2].fd!=(-1))&&tflag)	false
NonState	hidden	unix_dg_tmp_socket
NonState	hidden	portlist
NonState	hidden	recvcount
NonState	hidden	recvlimit
NonState	hidden	Zflag
NonState	hidden	tls_protocols
NonState	hidden	tls_ciphers
NonState	hidden	tls_expecthash
NonState	hidden	tls_expectname
NonState	hidden	TLSopt
NonState	hidden	tls_cachanged
NonState	hidden	Rflag
NonState	hidden	oflag
NonState	hidden	Kflag
NonState	hidden	Cflag
NonState	hidden	usetls
NonState	hidden	rtableid
NonState	hidden	Tflag
NonState	hidden	Sflag
NonState	hidden	Oflag
NonState	hidden	Iflag
NonState	hidden	Dflag
NonState	hidden	zflag
NonState	hidden	xflag
NonState	hidden	vflag
NonState	hidden	uflag
NonState	hidden	tflag
NonState	hidden	sflag
NonState	hidden	rflag
NonState	hidden	pflag
NonState	hidden	Pflag
NonState	hidden	nflag
NonState	hidden	kflag
NonState	hidden	iflag
NonState	hidden	Fflag
NonState	hidden	dflag
NonState	hidden	Nflag
NonState	hidden	tls_ctx
NonState	hidden	family
NonState	hidden	timeout
NonState	hidden	minttl
NonState	hidden	ttl
NonState	hidden	lflag
NonState	hidden	pfd
NonState	hidden	stdin_fd
NonState	hidden	stdout_fd
NonState	hidden	net_fd
Substitute	c_expr { ((((pfd[0].fd==(-1))&&(pfd[2].fd==(-1)))&&(Pp_readwrite->stdinbufpos==0))&&(Pp_readwrite->netinbufpos==0)) }	pipe[netin].closed[lflag] && netinbufpos == 0
Substitute	c_expr { ((pfd[1].fd==(-1))&&(pfd[3].fd==(-1))) }	pipe[netout].closed[lflag]
Substitute	c_expr { (((lflag&&(pfd[2].fd==(-1)))&&(Pp_readwrite->stdinbufpos==0))&&(Pp_readwrite->netinbufpos==0)) }	lflag && pipe[netin].closed[lflag] && stdinbufpos == 0 && netinbufpos == 0
Substitute	c_expr { (Pp_readwrite->num_fds==(-1)) }	false
Substitute	c_code { Pp_readwrite->n=0; }	hide
Substitute	c_expr { (Pp_readwrite->n<4) }	false
Substitute	c_expr { ((pfd[0].revents&POLLIN)&&(Pp_readwrite->stdinbufpos<16384)) }	false
Substitute	c_expr { ((pfd[1].revents&POLLOUT)&&(Pp_readwrite->stdinbufpos>0)) }	false
Substitute	c_expr { ((pfd[2].revents&POLLIN)&&(Pp_readwrite->netinbufpos<16384)) }	nempty(pipe[netin].fd) && netinbufpos < BUFSIZE
Substitute	c_expr { (Pp_readwrite->ret==TLS_WANT_POLLIN) }	false
Substitute	c_expr { (Pp_readwrite->ret==TLS_WANT_POLLOUT) }	false
Substitute	c_expr { (Pp_readwrite->ret==(-1)) }	false
Substitute	c_expr { (Pp_readwrite->netinbufpos>0) }	netinbufpos > 0
Substitute	c_expr { (Pp_readwrite->netinbufpos==16384) }	netinbufpos == BUFSIZE
Substitute	c_expr { ((pfd[3].revents&POLLOUT)&&(Pp_readwrite->netinbufpos>0)) }	netinbufpos > 0
Substitute	c_expr { (Pp_readwrite->netinbufpos==0) }	netinbufpos == 0
Substitute	c_expr { (Pp_readwrite->netinbufpos<16384) }	netinbufpos < BUFSIZE
Substitute	c_expr { ((pfd[0].fd==(-1))&&(Pp_readwrite->stdinbufpos==0)) }	stdinbufpos == 0
Substitute	c_expr { ((pfd[2].fd==(-1))&&(Pp_readwrite->netinbufpos==0)) }	pipe[netin].closed[0] && netinbufpos == 0
%%
%P
#define BUFSIZE (16)
#define CLIENT_SERVER (0)
#define SERVER_CLIENT (1)

mtype = { hello, I_am_client, I_am_server, bye };

typedef FD {
    bool closed[2];
    chan fd;
}

FD pipe[2];

inline poll(netin, netout, lflag, num_fds)
{
    num_fds = 0;
    // TODO: fill in
}

inline fillbuf(fd, buf, bufpos, ret)
{
    mtype msg;
    do
    :: nempty(fd) && bufpos < BUFSIZE ->
       fd ? msg;
       buf ! msg;
       bufpos++
    :: else -> break
    od;
    ret = bufpos
}

inline drainbuf(buf, bufpos, ret)
{
    mtype msg;
    do
    :: bufpos > 0 ->
       buf ? msg;
       bufpos--;
       printf("[%d]: got '%e', remain %d\n", _pid, msg, bufpos)
    :: else -> break
    od;
    ret = 0
}

proctype p_readwrite(bool lflag, int netin, int netout)
{
    chan netin_buf = [BUFSIZE] of { mtype };
    #include "_modex_readwrite.pml"
}

proctype p_tcp_client()
{
    chan netout_ch = pipe[CLIENT_SERVER].fd;
    netout_ch ! hello; netout_ch ! I_am_client; netout_ch ! bye;

    run p_readwrite(false, SERVER_CLIENT, CLIENT_SERVER)
}

proctype p_tcp_server()
{
    chan netout_ch = pipe[SERVER_CLIENT].fd;
    netout_ch ! hello; netout_ch ! I_am_server; netout_ch ! bye;

    run p_readwrite(true, CLIENT_SERVER, SERVER_CLIENT)
}

init {
    pipe[CLIENT_SERVER].fd = [BUFSIZE] of { mtype };
    pipe[CLIENT_SERVER].closed[0] = false;
    pipe[CLIENT_SERVER].closed[1] = false;
    pipe[SERVER_CLIENT].fd = [BUFSIZE] of { mtype };
    pipe[SERVER_CLIENT].closed[0] = false;
    pipe[SERVER_CLIENT].closed[1] = false;
    atomic {
        run p_tcp_client();
        run p_tcp_server();
    }
}
%%
